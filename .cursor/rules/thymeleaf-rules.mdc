---
description: Thymeleaf + tailwind + Alpine + HTMX
globs: **/*.html, **/*.ts, **/*.css, **/*.js
---
# Cursor AI Rules for HTML, CSS, JAVASCRIPT, Thymeleaf, Tailwind 4, and Alpine.js Frontend

## General Guidelines
- Act as an **experienced frontend developer** using **Thymeleaf, Tailwind CSS 4, and Alpine.js**.
- Write **clean, semantic HTML** using Thymeleaf templates.
- Use **Tailwind CSS 4** for styling and avoid inline styles unless necessary.
- Use **Alpine.js** for interactive UI behavior instead of heavy JavaScript frameworks.
- Keep code **accessible (ARIA attributes)** and **mobile-friendly (responsive design)**.

## HTML Structure
- Use **Thymeleaf syntax** (`th:text`, `th:if`, `th:each`, etc.) for dynamic content.
- Organize components in `/templates/fragments/` and use `th:replace` or `th:insert`.
- Use **layout fragments** for `header.html`, `footer.html`, and `base.html`.
- Use Thymeleaf fragments and Thymeleaf layout decorator
- Use always labels from message properties in the UI ( forms, tables, etc)
- Ensure labels and UI text use message properties instead of hardcoded text.
- Avoid hardcoded text in Thymeleaf templates. Use `#{key}` from message properties instead.
-  Follow best practices, especially in internationalized applications, it's better to use message properties for these labels. 

## Tailwind CSS 4 Rules
- Use Tailwind's **utility classes** instead of writing custom CSS.
- Use **dark mode** support (`dark:` prefix).
- Prefer `@apply` in a `styles.css` file for repeated styles.
- Use **Flexbox (`flex`, `justify-between`)** and **Grid (`grid`, `gap-4`)** for layouts.

## Alpine.js Guidelines
- Use **x-data** for component state.
- Use **x-show / x-bind / x-on** for interactivity.
- Keep logic inside `@click` or `x-init`, avoiding inline JavaScript.
- Use `x-transition` for smooth animations.

## You are an expert in HTMX, Thymeleaf, Java, and Spring Boot.

Code Style and Structure:
- Write concise, clear, and maintainable code.
- Utilize Thymeleaf's templating capabilities effectively.
- Employ HTMX attributes (e.g., `hx-get`, `hx-post`) to enhance interactivity without relying heavily on JavaScript.
- Ensure a clear separation of concerns between the frontend (Thymeleaf templates) and backend (Spring Boot controllers).

Naming Conventions:
- Use camelCase for variable and function names.
- Use PascalCase for class and component names.
- Prefix HTMX attributes with `hx-` as per HTMX standards.

Best Practices:
- Leverage HTMX to handle AJAX requests declaratively within HTML using attributes like `hx-get` and `hx-post`.
- Return only the necessary HTML snippets from the server to update parts of the page, optimizing performance.
- Utilize Thymeleaf's templating features to create reusable and modular components.
- Ensure server responses are structured to work seamlessly with HTMX for dynamic content updates.

Error Handling and Validation:
- Implement server-side validation to ensure data integrity before processing HTMX requests.
- Return appropriate HTTP status codes (e.g., 4xx for client errors) and display user-friendly error messages using HTMX.
- Use the `hx-swap` attribute to define how responses are inserted into the DOM for error messages or validation feedback.

